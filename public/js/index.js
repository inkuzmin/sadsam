// Generated by CoffeeScript 1.6.1
(function() {
  var App, Filters, FiltersView, Plant, PlantList, PlantListApp, PlantListView, PlantView;

  App = {};

  _.extend(App, Backbone.Events);

  _.extend(_, {
    getTypeFromName: function(types, name) {
      var x;
      for (x in types) {
        if (types.hasOwnProperty(x)) {
          if (types[x].name === name) {
            return x;
          }
        }
      }
    }
  });

  App.Plant = Plant = Backbone.Model.extend();

  App.PlantView = PlantView = Backbone.View.extend({
    tagName: 'li',
    className: 'span4',
    initialize: function() {
      this.model.on('change', this.render, this);
      return this.initPrizeButton();
    },
    events: function() {
      return {
        "click .tags": "changeFilters"
      };
    },
    template: _.template("        <div class='thumbnail'>            <img src='/img/plants/12345.png' />            <div class='thumbnail-head'>                <h4> <%= species %>                <%= name_ru %> </h4>                <div class='muted english'> <%= name_en %> </div>            </div>            <p class='description'> <%= description %> </p>            <div class='row push'></div>            <div class='tags badge'>                <span class='semilink'> <%= type %> </span>            </div>            <div class='order'>                <a class='btn btn-primary prize' href='#order'>                    <%= prize %>                    <span class='semispace'></span>                    <span class='ruble'>Р</span>                </a>            </div>        </div>    "),
    render: function() {
      var attributes;
      attributes = this.model.toJSON();
      this.$el.html(this.template(attributes));
      return this;
    },
    initPrizeButton: function() {
      return $(".prize").fancybox();
    },
    changeFilters: function(event) {
      App.trigger('tag:filter', {
        text: $(event.currentTarget).children().text().trim()
      });
      return event.stopPropagation();
    }
  });

  App.PlantList = PlantList = Backbone.Collection.extend({
    model: Plant,
    url: '/plants/random',
    refetch: function(filters) {
      var height, prize, search, type;
      if (filters.activeFilters.length > 0) {
        type = filters.activeFilters.join("&");
      } else {
        type = "*";
      }
      height = filters.height;
      prize = filters.prize;
      search = filters.search;
      this.url = "/plants/filters/" + type + "/" + prize + "/" + height + "/" + search;
      return this.fetch({
        reset: true
      });
    }
  });

  App.PlantListView = PlantListView = Backbone.View.extend({
    tagName: 'ul',
    className: 'thumbnails',
    initialize: function() {
      return this.collection.on('reset', this.addAll, this);
    },
    render: function() {
      this.addAll();
      return this;
    },
    addOne: function(plant) {
      var plantView;
      plantView = new PlantView({
        model: plant
      });
      return this.$el.append(plantView.render().el);
    },
    addAll: function() {
      this.$el.empty();
      return this.collection.forEach(this.addOne, this);
    }
  });

  App.FiltersView = FiltersView = Backbone.View.extend({
    el: ".filters",
    initialize: function() {
      this.initSliders();
      App.bind('tag:filter', this.changeFilterFromTag, this);
      return this.types = _.extend({}, this.model.get("filterList").source.own.type, this.model.get("filterList").source.imported.type);
    },
    log: function() {},
    events: {
      "slide #prize": "changePrizeView",
      "slide #height": "changeHeightView",
      "slidestop #prize": "modifyPrize",
      "slidestop #height": "modifyHeight",
      "keyup .search": "startSearch",
      "click .type": "toggleTypeFilter",
      "click .source": "toggleSourceFilter"
    },
    changeFilterFromTag: function(event) {
      var type;
      this.uncheckAllFilters();
      type = _.getTypeFromName(this.types, event.text);
      return this.toggleTypeFilter(type);
    },
    uncheckAllFilters: function() {
      _.each($('.type').filter('.filter-on'), function(filter) {
        return $(filter).removeClass('filter-on');
      });
      return this.model.uncheckAllFilters();
    },
    toggleTypeFilter: function(event) {
      var source, type, typeNode;
      typeNode = event.currentTarget || document.getElementById(event);
      type = typeNode.id;
      source = $(typeNode).parent().parent().attr("id");
      this.model.toggleTypeFilter(type, source);
      if (!$(typeNode).hasClass('filter-on')) {
        $(typeNode).addClass('filter-on');
      } else {
        $(typeNode).removeClass('filter-on');
      }
      return typeof event.stopPropagation === "function" ? event.stopPropagation() : void 0;
    },
    toggleSourceFilter: function(event) {
      var source;
      source = event.currentTarget;
      if (!$(source).hasClass('toggled')) {
        _.each($(source).children().children(".type"), function(typeNode) {
          return $(typeNode).addClass('filter-on');
        });
        $(source).addClass('toggled');
      } else {
        _.each($(source).children().children(".type"), function(typeNode) {
          return $(typeNode).removeClass('filter-on');
        });
        $(source).removeClass('toggled');
      }
      this.model.toggleSourceFilter(source.id);
      return event.stopPropagation();
    },
    initSliders: function() {
      $("#prize").slider({
        range: "min",
        min: 100,
        max: 1000,
        step: 5,
        value: 1000
      });
      return $("#height").slider({
        range: "min",
        max: 1000,
        min: 5,
        step: 5,
        value: 1000
      });
    },
    modifyPrize: function(event, ui) {
      return this.model.modifyPrize(ui.value);
    },
    modifyHeight: function(event, ui) {
      return this.model.modifyHeight(ui.value);
    },
    changePrizeView: function(event, ui) {
      return $(".prize-view").text(ui.value);
    },
    changeHeightView: function(event, ui) {
      return $(".height-view").text(ui.value);
    },
    startSearch: function(event) {
      var _this = this;
      $("#loader").show();
      clearTimeout(this.loaderTimeout);
      return this.loaderTimeout = setTimeout(function() {
        _this.model.setSearch($(".search").val());
        return $("#loader").hide();
      }, 2000);
    }
  });

  App.Filters = Filters = Backbone.Model.extend({
    uncheckAllFilters: function() {
      return this.set({
        "activeFilters": []
      });
    },
    setSearch: function(searchText) {
      return this.set({
        search: searchText
      });
    },
    modifyPrize: function(prize) {
      return this.set({
        prize: prize
      });
    },
    modifyHeight: function(height) {
      return this.set({
        height: height
      });
    },
    toggleSourceFilter: function(source) {
      var activeFilters, typeList;
      typeList = this.get("filterList").source[source].type;
      activeFilters = _.clone(this.get("activeFilters"));
      _.each(typeList, function(type) {
        var indexOfType;
        indexOfType = _.indexOf(activeFilters, type.name);
        if (indexOfType === -1) {
          return activeFilters.push(type.name);
        }
      });
      return this.set({
        "activeFilters": activeFilters
      });
    },
    toggleTypeFilter: function(type, source) {
      var activeFilters, indexOfType;
      type = this.get("filterList").source[source].type[type].name;
      activeFilters = _.clone(this.get("activeFilters"));
      indexOfType = _.indexOf(activeFilters, type);
      if (indexOfType !== -1) {
        activeFilters.splice(indexOfType, 1);
      } else {
        activeFilters.push(type);
      }
      return this.set({
        "activeFilters": activeFilters
      });
    },
    defaults: {
      search: "",
      prize: 1000,
      height: 1000,
      activeFilters: [],
      filterList: {
        source: {
          own: {
            name: "Свои",
            type: {
              shrubs: {
                name: "Кустарники"
              },
              ors: {
                name: "Многолетники с открытой корневой системой"
              }
            }
          },
          imported: {
            name: "Привозные",
            type: {
              roses: {
                name: "Розы"
              },
              clematis: {
                name: "Клематисы"
              },
              conifers: {
                name: "Хвойные"
              },
              perennials: {
                name: "Многолетники"
              },
              rhododendrons: {
                name: "Рододендроны"
              },
              peonies: {
                name: "Пионы"
              }
            }
          }
        }
      }
    }
  });

  App.PlantListApp = PlantListApp = new (Backbone.Router.extend({
    routes: {
      "": "index",
      "filter/:query": "filter"
    },
    initialize: function() {
      this.filters = new Filters();
      this.filtersView = new FiltersView({
        model: this.filters
      });
      this.filters.on('change', this.refetchPlants, this);
      this.plantList = new PlantList();
      this.plantListView = new PlantListView({
        collection: this.plantList
      });
      return $('.list').html(this.plantListView.el);
    },
    refetchPlants: function() {
      return this.plantList.refetch(this.filters.toJSON());
    },
    start: function() {
      return Backbone.history.start({
        pushState: true
      });
    },
    index: function() {
      return this.plantList.fetch({
        reset: true
      });
    },
    filter: function(filter) {
      return console.log(filter);
    }
  }));

  $(function() {
    return App.PlantListApp.start();
  });

}).call(this);
